buildscript {
    ext {
        springBootVersion = "2.1.5.RELEASE"
        springCloudVersion = "Greenwich.RELEASE"
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = "com.spring"
version = "0.0.1-SNAPSHOT"

configure(allprojects.findAll { it.subprojects.empty }) {
    //Java
    apply plugin: "java"

    //IDE
    apply plugin: "idea"
    apply plugin: "eclipse"

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    test {
        exclude "**/*"
    }

    ext {
        guavaVersion = "27.1-jre"

        orikaVersion = "1.5.4"
        modelmapperVersion = "2.3.3"

        fastJsonVersion = "1.2.57"

        commonsIoVersion = "2.6"
        commonsCodecVersion = "1.12"
        commonsLang3Version = "3.9"
        commonsBeanutilsVersion = "1.9.3"
        commonsCollectionsVersion = "3.2.2"
        commonsCollections4Version = "4.3"
    }

    dependencies {
        // Google Guava
        compile("com.google.guava:guava:${guavaVersion}")

        // Orika
        compile("ma.glasnost.orika:orika-core:${orikaVersion}")
        // ModelMapper
        compile("org.modelmapper:modelmapper:${modelmapperVersion}")

        // FastJSON
        compile("com.alibaba:fastjson:${fastJsonVersion}")

        // Commons
        compile("commons-io:commons-io:${commonsIoVersion}")
        compile("commons-codec:commons-codec:${commonsCodecVersion}")
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
        compile("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
        compile("commons-collections:commons-collections:${commonsCollectionsVersion}")
        compile("org.apache.commons:commons-collections4:${commonsCollections4Version}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.startsWith("platform-")
}) {
    ext {
        lombokVersion = "1.18.6"
        jaxbApiVersion = "2.3.1"
        jaxbImplVersion = "2.1.2"
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor ("org.projectlombok:lombok:${lombokVersion}")

        // Spring AOP
        compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")

        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

        // Spring JSON
        compile("org.springframework.boot:spring-boot-starter-json:${springBootVersion}")

        //JavaEE
        //compile ("javax.xml.bind:jaxb-api:${jaxbApiVersion}")
        //compile ("com.sun.xml.bind:jaxb-impl:${jaxbImplVersion}")

        // Spring Devtools 热部署
        runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith("-api")
}) {
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring REST Jersey
        compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith("-service")
}) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    bootJar {
        project.name
    }

    ext {
        mysqlVersion = "8.0.15"
        druidVersion = "1.1.14"

        hibernateVersion = "5.4.2.Final"

        myBatisVersion = "2.0.0"
        pagehelperVersion = "5.1.8"
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring AOP
        compile("org.springframework.boot:spring-boot-starter-aop")
        // Spring Cache
        compile("org.springframework.boot:spring-boot-starter-cache")

        // Spring AMQP
        compile("org.springframework.boot:spring-boot-starter-amqp")
        // Spring Data JPA
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        // Spring Data JDBC
        compile("org.springframework.boot:spring-boot-starter-data-jdbc")
        // Spring Data Redis
        compile("org.springframework.boot:spring-boot-starter-data-redis")

        // Spring Actuator
        compile("org.springframework.boot:spring-boot-starter-actuator")
        // Spring Security
        //compile("org.springframework.boot:spring-boot-starter-security")

        // Spring WebFlux
        //compile("org.springframework.boot:spring-boot-starter-webflux")
        // Spring WebSocket
        //compile("org.springframework.boot:spring-boot-starter-websocket")

        // Spring REST Jersey
        compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")

        // Spring JSON
        compile("org.springframework.boot:spring-boot-starter-json")
        // Spring Quartz
        //compile("org.springframework.boot:spring-boot-starter-quartz")
        // Spring Mail
        //compile("org.springframework.boot:spring-boot-starter-mail")

        // MySQL
        compile("mysql:mysql-connector-java:${mysqlVersion}")
        // Druid
        compile("com.alibaba:druid:${druidVersion}")

        // Hibernate
        compile("org.hibernate:hibernate-core:${hibernateVersion}")

        // MyBatis
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${myBatisVersion}")
        compile("com.github.pagehelper:pagehelper:${pagehelperVersion}")

        // Eureka
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client") {
            exclude(group: "com.sun.jersey")
            exclude(group: "javax.ws.rs", module: "jsr311-api")
        }

        //Ribbon
        compile("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")
        //Feign
        //compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        //Zuul
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul")
        //Hystrix
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        //Hystrix Dashboard
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")

        // Spring Devtools 热部署
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith("-ui")
}) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    bootJar {
        project.name
    }

    ext {}

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring MVC
        compile("org.springframework.boot:spring-boot-starter-web")

        // Spring Cache
        compile("org.springframework.boot:spring-boot-starter-cache")

        // Spring Actuator
        compile("org.springframework.boot:spring-boot-starter-actuator")
        // Spring Security
        //compile("org.springframework.boot:spring-boot-starter-security")

        // Spring WebFlux
        compile("org.springframework.boot:spring-boot-starter-webflux")
        // Spring WebSocket
        compile("org.springframework.boot:spring-boot-starter-websocket")

        // Spring REST Jersey
        //compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")

        // Spring JSON
        compile("org.springframework.boot:spring-boot-starter-json")
        // Spring Quartz
        compile("org.springframework.boot:spring-boot-starter-quartz")
        // Spring Mail
        compile("org.springframework.boot:spring-boot-starter-mail")

        // Eureka
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client") {
            exclude(group: "com.sun.jersey")
            exclude(group: "javax.ws.rs", module: "jsr311-api")
        }

        //Ribbon
        compile("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")

        // Spring Devtools 热部署
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.startsWith("dubbo-")
}) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    bootJar {
        project.name
    }

    ext {
        mysqlVersion = "8.0.15"
        druidVersion = "1.1.16"

        hibernateVersion = "5.4.2.Final"

        myBatisVersion = "2.0.0"
        pagehelperVersion = "5.1.8"

        nettyVersion = "4.1.35.Final"
        dubboVersion = "2.7.1"
        zookeeperVersion = "3.4.14"
        zkClientVersion = "0.11"
        curatorVersion = "4.2.0"
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring AOP
        compile("org.springframework.boot:spring-boot-starter-aop")
        // Spring Cache
        compile("org.springframework.boot:spring-boot-starter-cache")

        // Spring MVC
        compile("org.springframework.boot:spring-boot-starter-web")
        // Spring REST Jersey
        compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")

        // Spring JSON
        compile("org.springframework.boot:spring-boot-starter-json")

        // Spring Data JPA
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        // Spring Data JDBC
        compile("org.springframework.boot:spring-boot-starter-data-jdbc")

        // Spring AMQP
        compile("org.springframework.boot:spring-boot-starter-amqp")
        // Spring Data Redis
        compile("org.springframework.boot:spring-boot-starter-data-redis")

        // MySQL
        compile("mysql:mysql-connector-java:${mysqlVersion}")
        // Druid
        compile("com.alibaba:druid:${druidVersion}")

        // Hibernate
        compile("org.hibernate:hibernate-core:${hibernateVersion}")

        // MyBatis
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${myBatisVersion}")
        compile("com.github.pagehelper:pagehelper:${pagehelperVersion}")

        // Netty
        compile ("io.netty:netty-all:${nettyVersion}")

        // Dubbo
        compile ("org.apache.dubbo:dubbo:${dubboVersion}")
        compile ("org.apache.dubbo:dubbo-dependencies-zookeeper:${dubboVersion}")

        //Zookeeper
        compile ("org.apache.zookeeper:zookeeper:${zookeeperVersion}")
        //ZkClient
        compile ("com.101tec:zkclient:${zkClientVersion}")
        //Curator
        compile ("org.apache.curator:curator-framework:${curatorVersion}")

        // Spring Devtools 热部署
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}
