buildscript {
    ext {
        springBootVersion = "2.1.3.RELEASE"
        springCloudVersion = "Finchley.RELEASE"
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = "com.spring"
version = "0.0.1-SNAPSHOT"

configure(allprojects.findAll { it.subprojects.empty }) {
    //Java
    apply plugin: "java"

    //IDE
    apply plugin: "idea"
    apply plugin: "eclipse"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    test {
        exclude "**/*"
    }

    ext {
        guavaVersion = "27.0.1-jre"

        modelmapperVersion = "1.1.2"
        orikaVersion = "1.5.4"

        fastJosnVersion = "1.2.56"

        commonsIoVersion = "2.6"
        commonsCodecVersion = "1.11"
        commonsLang3Version = "3.8.1"
        commonsBeanutilsVersion = "1.9.3"
        commonsCollectionsVersion = "3.2.2"
    }

    dependencies {
        // Google Guava
        compile("com.google.guava:guava:${guavaVersion}")

        // ModelMapper
        compile("org.modelmapper:modelmapper:${modelmapperVersion}")
        // Orika
        compile("ma.glasnost.orika:orika-core:${orikaVersion}")

        // FastJSON
        compile("com.alibaba:fastjson:${fastJosnVersion}")

        // Commons
        compile("commons-io:commons-io:${commonsIoVersion}")
        compile("commons-codec:commons-codec:${commonsCodecVersion}")
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
        compile("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
        compile("commons-collections:commons-collections:${commonsCollectionsVersion}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.startsWith("platform-")
}) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    bootJar {
        baseName = project.name
    }

    ext {}

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Eureka
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith("-api")
}) {
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring REST Jersey
        compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}


configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith("-service")
}) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    bootJar {
        baseName = project.name
    }

    ext {
        mysqlVersion = "8.0.15"
        druidVersion = "1.1.14"

        hibernateVersion = "5.4.0.Final"

        myBatisVersion = "2.0.0"
        pagehelperVersion = "5.1.8"
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring AOP
        compile("org.springframework.boot:spring-boot-starter-aop")
        // Spring Cache
        compile("org.springframework.boot:spring-boot-starter-cache")

        // Spring AMQP
        compile("org.springframework.boot:spring-boot-starter-amqp")
        // Spring Data JPA
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        // Spring Data JDBC
        compile("org.springframework.boot:spring-boot-starter-data-jdbc")
        // Spring Data Redis
        compile("org.springframework.boot:spring-boot-starter-data-redis")

        // Spring Actuator
        compile("org.springframework.boot:spring-boot-starter-actuator")
        // Spring Security
        //compile("org.springframework.boot:spring-boot-starter-security")

        // Spring WebFlux
        compile("org.springframework.boot:spring-boot-starter-webflux")
        // Spring WebSocket
        compile("org.springframework.boot:spring-boot-starter-websocket")

        // Spring REST Jersey
        compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")

        // Spring JSON
        compile("org.springframework.boot:spring-boot-starter-json")
        // Spring Quartz
        compile("org.springframework.boot:spring-boot-starter-quartz")
        // Spring Mail
        compile("org.springframework.boot:spring-boot-starter-mail")

        // MySQL
        compile("mysql:mysql-connector-java:${mysqlVersion}")
        // Druid
        compile("com.alibaba:druid:${druidVersion}")

        // Hibernate
        compile("org.hibernate:hibernate-core:${hibernateVersion}")

        // MyBatis
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${myBatisVersion}")
        compile("com.github.pagehelper:pagehelper:${pagehelperVersion}")

        // Eureka
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

        //Ribbon
        compile("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")
        //Feign
        //compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        //Zuul
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul")
        //Hystrix
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        //Hystrix Dashboard
        //compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith("-ui")
}) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    bootJar {
        baseName = project.name
    }

    ext {}

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")

        // Spring MVC
        compile("org.springframework.boot:spring-boot-starter-web")

        // Spring Cache
        compile("org.springframework.boot:spring-boot-starter-cache")

        // Spring Actuator
        compile("org.springframework.boot:spring-boot-starter-actuator")
        // Spring Security
        //compile("org.springframework.boot:spring-boot-starter-security")

        // Spring WebFlux
        compile("org.springframework.boot:spring-boot-starter-webflux")
        // Spring WebSocket
        compile("org.springframework.boot:spring-boot-starter-websocket")

        // Spring REST Jersey
        compile("org.springframework.boot:spring-boot-starter-jersey")
        // Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation")

        // Spring JSON
        compile("org.springframework.boot:spring-boot-starter-json")
        // Spring Quartz
        compile("org.springframework.boot:spring-boot-starter-quartz")
        // Spring Mail
        compile("org.springframework.boot:spring-boot-starter-mail")

        // Eureka
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

        //Ribbon
        compile("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools")

        // Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}
